{"version":3,"sources":["stylesheets/game_class.png","serviceWorker.ts","types/game.ts","store/actions.ts","store/state.ts","types/globals.ts","types/helpers.ts","store/reducers.ts","store/index.ts","ui/TopBar.tsx","ui/Intro.tsx","ui/Container.tsx","ui/Parachute.tsx","ui/SelectCoalition.tsx","ui/OfferForm.tsx","ui/AckForm.tsx","ui/Finished.tsx","ui/SetupScreen.tsx","containers/AppContainer.tsx","ui/App.tsx","index.tsx"],"names":["module","exports","Boolean","window","location","hostname","match","Player","Actions","allPlayers","P1","P2","P3","defaultState","screen","coalitionsValues","players","currentTurn","coalitionForOffer","offers","reason","states","CoalitionsCombinations","getPlayerName","player","getParticipants","coalitionId","isOfferFinished","o","finiteStatus","status","indexOf","isOfferAccepted","acceptStatus","s","isOfferRejected","getMissingPlayer","c","latestAcceptedOffer","slice","reverse","find","appReducer","state","action","type","START_GAME","buildDefaultOffer","cleanState","RESTART_GAME","SELECT_COALITION","payload","selectedCoalition","SUBMIT_OFFER","actor","split","users","offer","forEach","u","RESPOND_OFFER","resOfferActor","lastOffer","pop","UNDO","lastState","length","GIVE_UP","SETUP","UPDATE_COALITION_VALUES","res","Math","floor","ceil","logger","getState","next","console","groupCollapsed","log","returnValue","groupEnd","TopBar","props","className","onClick","onSetupClick","onUndo","onStartGame","onIntroClick","Intro","src","game_class_img","alt","Container","children","Parachute","editable","useState","input","setInput","handleUpdateVal","value","newInput","onUpdateCoalition","disabled","onUpdate","ValueButton","defaultValue","onChange","e","parseInt","target","PlayerButton","SelectCoalition","ActualSelection","onGiveUp","coalitions","coalitionsForPlayer","map","idx","key","onCoalitionSelect","SingleCoal","txt","getCoalitionString","CurrentAgreement","p","OfferForm","onOfferSubmit","onChangeHandler","onSubmit","event","preventDefault","maxForCoalition","PlayerInput","min","max","AckForm","onOfferRespond","latestOffer","handleOnClick","SingleSelect","SingleOffer","ListOfOffers","FinishScreen","lao","presetGames","SetupScreen","v","onGameStart","title","JSON","stringify","defaultOffer","AppContainer","connect","dispatch","selectCoalition","onGameRestart","offerFrom","submitOffer","response","updateCoalitions","Fragment","store","initialState","composeEnhancers","composeWithDevTools","createStore","applyMiddleware","thunk","storeFactory","localStorage","parse","subscribe","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b7a5d3ec.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/game_class.b52faa08.png\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","export enum Player {\n  P1 = \"P1\",\n  P2 = \"P2\",\n  P3 = \"P3\",\n}\n\nexport const allPlayers = [Player.P1, Player.P2, Player.P3];\n\nexport interface GameCoalitionsValues {\n  \"12\": number;\n  \"13\": number;\n  \"23\": number;\n  \"123\": number;\n}\n\nexport const defaultGameCoalitionsValues: GameCoalitionsValues = {\n  \"12\": 0,\n  \"13\": 0,\n  \"23\": 0,\n  \"123\": 0,\n};\n\nexport type CoalitionId = keyof GameCoalitionsValues;\n\nexport type Split = { [key in Player]: number };\n\nexport type AckStatus =\n  | \"PROPOSED\"\n  | \"ACCEPTED\"\n  | \"REJECTED\"\n  | \"NON_RELEVANT\"\n  | \"TBD\";\n\nexport type respStatus = \"ACCEPT\" | \"REJECT\";\n\nexport interface Offer {\n  actor: Player;\n  selectedCoalition: CoalitionId;\n  split: Split;\n  [Player.P1]: AckStatus;\n  [Player.P2]: AckStatus;\n  [Player.P3]: AckStatus;\n}\n\n// // Defines the enum of players. TODO\n// export enum Player {\n//   P1 = \"P1\",\n//   P2 = \"P2\",\n//   P3 = \"P3\",\n// }\n//\n// export const SETUP_SCREEN = \"SETUP_SCREEN\";\n// export const GAME_SCREEN = \"GAME_SCREEN\";\n//\n// // Defines screen types.\n// export type ScreenType = typeof SETUP_SCREEN | typeof GAME_SCREEN;\n//\n// // // Defines all possible coalitions.\n// // export interface GameCoalitions {\n// //   value12: number;\n// //   value23: number;\n// //   value13: number;\n// //   value123: number;\n// // }\n//\n// export const GameCoalitionsZeroValue: GameCoalitionsValues = {\n//   \"12\": 0,\n//   \"13\": 0,\n//   \"23\": 0,\n//   \"123\": 0,\n// };\n//\n// export interface IPlayer {\n//   name: string;\n// }\n//\n// export interface Player1 extends IPlayer {\n//   id: Player.P1;\n// }\n//\n// export interface Player2 extends IPlayer {\n//   id: Player.P2;\n// }\n//\n// export interface Player3 extends IPlayer {\n//   id: Player.P3;\n// }\n//\n// export type CoalitionsCombination =\n//   | [Player.P1, Player.P2]\n//   | [Player.P1, Player.P3]\n//   | [Player.P2, Player.P3]\n//   | [Player.P1, Player.P2, Player.P3];\n//\n// export interface GameCoalitionsCombination {\n//   \"12\": [Player.P1, Player.P2];\n//   \"13\": [Player.P1, Player.P3];\n//   \"23\": [Player.P2, Player.P3];\n//   \"123\": [Player.P1, Player.P2, Player.P3];\n// }\n//\n// export interface GameCoalitionsValues {\n//   \"12\": number;\n//   \"13\": number;\n//   \"23\": number;\n//   \"123\": number;\n// }\n//\n// export type CoalitionId = keyof GameCoalitionsCombination;\n//\n// export interface Coalition {\n//   members: CoalitionsCombination;\n// }\n//\n// export type Split = { [key in Player]: number } & { coalitionId: CoalitionId };\n","import {\n  CoalitionId,\n  GameCoalitionsValues,\n  Offer,\n  Player,\n  respStatus,\n  Split,\n} from \"../types/game\";\n\nexport enum Actions {\n  START_GAME = \"START_GAME\",\n  CONFIGURE_GAME = \"CONFIGURE_GAME\",\n  RESTART_GAME = \"RESTART_GAME\",\n  SELECT_COALITION = \"SELECT_COALITION\",\n  SUBMIT_OFFER = \"SUBMIT_OFFER\",\n  RESPOND_OFFER = \"RESPOND_OFFER\",\n  UNDO = \"UNDO\",\n  SETUP = \"SETUP\",\n  UPDATE_COALITION_VALUES = \"UPDATE_COALITION_VALUES\",\n  // ACCEPT_OFFER = \"ACCEPT_OFFER\",\n  // REJECT_OFFER = \"REJECT_OFFER\",\n  BACK = \"BACK\",\n  GIVE_UP = \"GIVE_UP\",\n}\n\nexport const updateCoalitions = (\n  c: GameCoalitionsValues\n): UpdateCoalitionsAction => {\n  return {\n    type: Actions.UPDATE_COALITION_VALUES,\n    payload: {\n      c,\n    },\n  };\n};\n\nexport const setup = (): SetupAction => {\n  return {\n    type: Actions.SETUP,\n    payload: {},\n  };\n};\n\nexport const giveUp = (): GiveUpAction => {\n  return {\n    type: Actions.GIVE_UP,\n    payload: {},\n  };\n};\n\nexport const undo = (): UndoAction => {\n  return {\n    type: Actions.UNDO,\n    payload: {},\n  };\n};\n\nexport const respondOffer = (\n  actor: Player,\n  status: respStatus\n): RespondOfferAction => {\n  return {\n    type: Actions.RESPOND_OFFER,\n    payload: {\n      actor: actor,\n      status: status,\n    },\n  };\n};\n\nexport const startGame = (offer: Offer): StartGameAction => {\n  return {\n    type: Actions.START_GAME,\n    payload: {\n      offer: offer,\n    },\n  };\n};\n\nexport const restartGame = (): RestartAction => {\n  return {\n    type: Actions.RESTART_GAME,\n    payload: {},\n  };\n};\n\nexport const selectCoalition = (c: CoalitionId): SelectCoalitionAction => {\n  return {\n    type: Actions.SELECT_COALITION,\n    payload: {\n      selectedCoalition: c,\n    },\n  };\n};\n\nexport const submitOffer = (\n  split: Split,\n  coalitionId: CoalitionId,\n  offerFrom: Player\n): SubmitOfferAction => {\n  return {\n    type: Actions.SUBMIT_OFFER,\n    payload: {\n      actor: offerFrom,\n      selectedCoalition: coalitionId,\n      split: split,\n    },\n  };\n};\n\ninterface StartGameAction {\n  type: Actions.START_GAME;\n  payload: {\n    offer: Offer;\n  };\n}\n\ninterface ConfigureAction {\n  type: Actions.CONFIGURE_GAME;\n  payload: {\n    gameCoalitionsValues: GameCoalitionsValues;\n  };\n}\n\ninterface RestartAction {\n  type: Actions.RESTART_GAME;\n  payload: {};\n}\n\ninterface SelectCoalitionAction {\n  type: Actions.SELECT_COALITION;\n  payload: {\n    selectedCoalition: CoalitionId;\n  };\n}\n\ninterface SubmitOfferAction {\n  type: Actions.SUBMIT_OFFER;\n  payload: {\n    actor: Player;\n    selectedCoalition: CoalitionId;\n    split: Split;\n  };\n}\n\n//\ninterface UndoAction {\n  type: Actions.UNDO;\n  payload: {};\n}\n\ninterface GiveUpAction {\n  type: Actions.GIVE_UP;\n  payload: {};\n}\n\ninterface SetupAction {\n  type: Actions.SETUP;\n  payload: {};\n}\n\ninterface RespondOfferAction {\n  type: Actions.RESPOND_OFFER;\n  payload: {\n    actor: Player;\n    status: respStatus;\n  };\n}\n\ninterface UpdateCoalitionsAction {\n  type: Actions.UPDATE_COALITION_VALUES;\n  payload: {\n    c: GameCoalitionsValues;\n  };\n}\n\nexport type GameAction =\n  | StartGameAction\n  | ConfigureAction\n  | SelectCoalitionAction\n  | RestartAction\n  | SubmitOfferAction\n  | RespondOfferAction\n  | UndoAction\n  | GiveUpAction\n  | SetupAction\n  | UpdateCoalitionsAction;\n","import {\n  CoalitionId,\n  defaultGameCoalitionsValues,\n  GameCoalitionsValues,\n  Offer,\n  Player,\n} from \"../types/game\";\n\nexport type GameScreen =\n  | \"SETUP\"\n  | \"INTRO\"\n  | \"SELECT_COAL\"\n  | \"OFFER\"\n  | \"ACK\"\n  | \"FINISHED\";\nexport type ChangeReason = \"OFFER_REJECTED\" | \"OFFER_ACCEPTED\";\n\nexport interface StateShape {\n  // gameCoalitions: GameCoalitionsValues;\n  // screen: ScreenType;\n  // gamePlay: GamePlayState;\n  coalitionsValues: GameCoalitionsValues;\n  screen: GameScreen;\n  players: Array<Player>;\n  currentTurn: Player;\n  coalitionForOffer: CoalitionId;\n  offers: Array<Offer>;\n  reason: ChangeReason;\n  states: Array<StateShape>;\n}\n\nexport const defaultState: StateShape = {\n  screen: \"INTRO\",\n  coalitionsValues: defaultGameCoalitionsValues,\n  players: [Player.P1, Player.P2, Player.P3],\n  currentTurn: Player.P1,\n  coalitionForOffer: \"23\",\n  offers: [],\n  reason: \"OFFER_ACCEPTED\",\n  states: [],\n\n  // gameCoalitions: GameCoalitionsZeroValue,\n  // screen: SETUP_SCREEN,\n  // gamePlay: initialGamePlayState,\n};\n","import { Player } from \"./game\";\n\nexport interface GameCoalitionsCombination {\n  \"12\": Array<Player>;\n  \"13\": Array<Player>;\n  \"23\": Array<Player>;\n  \"123\": Array<Player>;\n}\n\nexport const CoalitionsCombinations: GameCoalitionsCombination = {\n  \"12\": [Player.P1, Player.P2],\n  \"13\": [Player.P1, Player.P3],\n  \"23\": [Player.P2, Player.P3],\n  \"123\": [Player.P1, Player.P2, Player.P3],\n};\n","import { AckStatus, CoalitionId, Offer, Player } from \"./game\";\nimport { CoalitionsCombinations } from \"./globals\";\n\n/**\n * This is temporal until we get the player name form state\n * @param player\n */\nexport const getPlayerName = (player: Player) => {\n  switch (player) {\n    case Player.P1:\n      // return \"Player One\";\n      return \"P1\";\n    case Player.P2:\n      // return \"Player Two\";\n      return \"P2\";\n    case Player.P3:\n      return \"P3\";\n    // return \"Player Three\";\n  }\n};\n\n/**\n * This is temporal until we get the player name form state\n * @param player\n */\nexport const coalitionsForPlayer = (player: Player): Array<CoalitionId> => {\n  switch (player) {\n    case Player.P1:\n      return [\"12\", \"13\", \"123\"];\n    case Player.P2:\n      return [\"12\", \"23\", \"123\"];\n    case Player.P3:\n      return [\"13\", \"23\", \"123\"];\n  }\n};\n\nexport const getParticipants = (coalitionId: CoalitionId): Array<Player> => {\n  return CoalitionsCombinations[coalitionId];\n};\n\nexport const getCoalitionString = (c: CoalitionId) => {\n  switch (c) {\n    case \"12\":\n      return `Coalition of ${getPlayerName(Player.P1)} and ${getPlayerName(\n        Player.P2\n      )}`;\n    case \"13\":\n      return `Coalition of ${getPlayerName(Player.P1)} and ${getPlayerName(\n        Player.P3\n      )}`;\n    case \"23\":\n      return `Coalition of ${getPlayerName(Player.P2)} and ${getPlayerName(\n        Player.P3\n      )}`;\n    case \"123\":\n      return `Coalition of ${getPlayerName(Player.P1)}, ${getPlayerName(\n        Player.P2\n      )} and ${getPlayerName(Player.P3)}`;\n  }\n};\n\nexport const isOfferFinished = (o: Offer) => {\n  return (\n    finiteStatus(o[Player.P1]) &&\n    finiteStatus(o[Player.P2]) &&\n    finiteStatus(o[Player.P3])\n  );\n};\n\nexport const finiteStatus = (status: AckStatus) => {\n  const finiteStatuses = [\"PROPOSED\", \"ACCEPTED\", \"REJECTED\", \"NON_RELEVANT\"];\n  return finiteStatuses.indexOf(status) !== -1;\n};\n\nexport const isOfferAccepted = (o: Offer) => {\n  const acceptStatus = (s: AckStatus) => {\n    const acceptStatuses = [\"PROPOSED\", \"ACCEPTED\", \"NON_RELEVANT\"];\n    return acceptStatuses.indexOf(s) !== -1;\n  };\n\n  return (\n    acceptStatus(o[Player.P1]) &&\n    acceptStatus(o[Player.P2]) &&\n    acceptStatus(o[Player.P3])\n  );\n};\n\nexport const isOfferRejected = (o: Offer) => {\n  return isOfferFinished(o) && !isOfferAccepted(o);\n};\n\nexport const getMissingPlayer = (c: CoalitionId) => {\n  switch (c) {\n    case \"123\":\n      return Player.P1;\n    case \"23\":\n      return Player.P1;\n    case \"13\":\n      return Player.P2;\n    case \"12\":\n      return Player.P3;\n  }\n};\n\nexport const latestAcceptedOffer = (offers: Array<Offer>) => {\n  return offers.slice().reverse().find(isOfferAccepted)!;\n};\n","import { defaultState, GameScreen, StateShape } from \"./state\";\nimport { Actions, GameAction } from \"./actions\";\nimport {\n  getMissingPlayer,\n  getParticipants,\n  isOfferAccepted,\n  isOfferFinished,\n  isOfferRejected,\n} from \"../types/helpers\";\nimport { Offer, Player } from \"../types/game\";\n\nexport const appReducer = (\n  state: StateShape = defaultState,\n  action: GameAction\n): StateShape => {\n  switch (action.type) {\n    case Actions.START_GAME:\n      return {\n        ...state,\n        screen: \"SELECT_COAL\",\n        coalitionsValues: { ...state.coalitionsValues },\n        offers: [buildDefaultOffer(state)],\n        states: [...state.states, cleanState(state)],\n      };\n    case Actions.RESTART_GAME:\n      return { ...state, screen: \"INTRO\" };\n    case Actions.SELECT_COALITION:\n      return {\n        ...state,\n        screen: \"OFFER\",\n        coalitionForOffer: action.payload.selectedCoalition,\n        states: [...state.states, cleanState(state)],\n      };\n    case Actions.SUBMIT_OFFER:\n      const { actor, selectedCoalition, split } = action.payload;\n      const users = getParticipants(selectedCoalition);\n      const offer: Offer = {\n        actor,\n        selectedCoalition,\n        split,\n        P1: \"NON_RELEVANT\",\n        P2: \"NON_RELEVANT\",\n        P3: \"NON_RELEVANT\",\n      };\n      users.forEach((u) => (offer[u] = \"TBD\"));\n      offer[actor] = \"PROPOSED\";\n\n      return {\n        ...state,\n        screen: \"ACK\",\n        offers: [...state.offers, offer],\n        states: [...state.states, cleanState(state)],\n      };\n    case Actions.RESPOND_OFFER:\n      const { actor: resOfferActor, status } = action.payload;\n      const lastOffer = { ...state.offers.pop()! };\n\n      if (status === \"ACCEPT\") {\n        lastOffer[resOfferActor] = \"ACCEPTED\";\n      }\n\n      if (status === \"REJECT\") {\n        lastOffer[resOfferActor] = \"REJECTED\";\n      }\n\n      if (!isOfferFinished(lastOffer)) {\n        return {\n          ...state,\n          offers: [...state.offers, lastOffer],\n          states: [...state.states, cleanState(state)],\n        };\n      }\n\n      //offer finished\n      if (isOfferRejected(lastOffer)) {\n        return {\n          ...state,\n          offers: [...state.offers, lastOffer],\n          reason: \"OFFER_REJECTED\",\n          screen: \"SELECT_COAL\",\n          states: [...state.states, cleanState(state)],\n        };\n      }\n\n      if (isOfferAccepted(lastOffer)) {\n        let screen: GameScreen = \"SELECT_COAL\";\n\n        if (lastOffer.selectedCoalition === \"123\") {\n          screen = \"FINISHED\";\n        }\n\n        return {\n          ...state,\n          offers: [...state.offers, lastOffer],\n          reason: \"OFFER_ACCEPTED\",\n          screen: screen,\n          currentTurn: getMissingPlayer(lastOffer.selectedCoalition),\n          states: [...state.states, cleanState(state)],\n        };\n      }\n\n      throw \"Should not happen\";\n\n    case Actions.UNDO:\n      if (state.states) {\n        const lastState = state.states[state.states.length - 1];\n\n        return {\n          ...lastState,\n          states: state.states.slice(0, -1),\n        };\n      }\n\n      return { ...state };\n\n    case Actions.GIVE_UP:\n      return {\n        ...state,\n        states: [...state.states, cleanState(state)],\n        screen: \"FINISHED\",\n      };\n\n    case Actions.SETUP:\n      return {\n        ...state,\n        screen: \"SETUP\",\n        states: [...state.states, cleanState(state)],\n      };\n    case Actions.UPDATE_COALITION_VALUES:\n      return {\n        ...state,\n        coalitionsValues: { ...action.payload.c },\n      };\n\n    default:\n      return {\n        ...state,\n      };\n  }\n};\n\nconst cleanState = (s: StateShape): StateShape => {\n  const res = { ...s };\n  res.states = [];\n  return res;\n};\n\nconst buildDefaultOffer = (s: StateShape): Offer => {\n  return {\n    P1: \"NON_RELEVANT\",\n    P2: \"ACCEPTED\",\n    P3: \"ACCEPTED\",\n    actor: Player.P1,\n    selectedCoalition: \"23\",\n    split: {\n      P1: 0,\n      P2: Math.floor(s.coalitionsValues[\"23\"] / 2),\n      P3: Math.ceil(s.coalitionsValues[\"23\"] / 2),\n    },\n  };\n};\n","import {\n  applyMiddleware,\n  createStore,\n  Dispatch,\n  Middleware,\n  MiddlewareAPI,\n} from \"redux\";\nimport thunk from \"redux-thunk\";\nimport { defaultState } from \"./state\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport { appReducer } from \"./reducers\";\n\nconst logger = () => {\n  const loggerMiddleware: Middleware = ({ getState }: MiddlewareAPI) => (\n    next: Dispatch\n  ) => (action) => {\n    console.groupCollapsed(`dispatching action => ${action.type}`);\n    console.log(\"will dispatch\", action);\n\n    // Call the next dispatch method in the middleware chain.\n    const returnValue = next(action);\n\n    console.log(\"state after dispatch\", getState());\n    console.groupEnd();\n    // This will likely be the action itself, unless\n    // a middleware further in chain changed it.\n    return returnValue;\n  };\n\n  return loggerMiddleware;\n};\n\nexport const storeFactory = (initialState = defaultState) => {\n  const composeEnhancers = composeWithDevTools({});\n  return createStore(\n    appReducer,\n    initialState,\n    composeEnhancers(applyMiddleware(thunk, logger()))\n  );\n};\n","import React from \"react\";\nimport { GameScreen } from \"../store/state\";\n\ninterface topBarProps {\n  onStartGame: () => void;\n  onIntroClick: () => void;\n  onSetupClick: () => void;\n  onUndo: () => void;\n  screen: GameScreen;\n}\n\nexport const TopBar = (props: topBarProps) => {\n  return (\n    <div className={\"root_topbar\"}>\n      <span className={\"root_topbar_title\"}>The Coalition Parachute game</span>\n      <span>\n        {props.screen === \"INTRO\" && (\n          <button className={\"root_topbar_button\"} onClick={props.onSetupClick}>\n            Setup\n          </button>\n        )}\n\n        {props.screen !== \"INTRO\" && (\n          <button className={\"root_topbar_button\"} onClick={props.onUndo}>\n            Undo\n          </button>\n        )}\n\n        {(props.screen === \"INTRO\" || props.screen === \"SETUP\") && (\n          <button className={\"root_topbar_button\"} onClick={props.onStartGame}>\n            Start Game\n          </button>\n        )}\n        {props.screen !== \"INTRO\" && props.screen !== \"SETUP\" && (\n          <button className={\"root_topbar_button\"} onClick={props.onIntroClick}>\n            Restart\n          </button>\n        )}\n      </span>\n    </div>\n  );\n};\n","import React from \"react\";\nimport game_class_img from \"../stylesheets/game_class.png\";\n\ninterface introProps {}\n\nexport const Intro = (props: introProps) => {\n  return (\n    <div className={\"intro_root\"}>\n      <p>{`This game is going to simulate the parachute game we did in class, playing in turns, On each turn a player \n    will have the chance to make an offer to the other participants to join him, create a coalition, and share the \n    point of the coalition they have created.`}</p>\n      <p>\n        {`Pay attention that the point of the coalition you create are not split evenly and try to get the best value \n      you can in the current game set`}\n      </p>\n      <p>{\"Good luck\"}</p>\n      <img className={\"intro_img\"} src={game_class_img} alt={\"parachute\"} />\n    </div>\n  );\n};\n","import React, { PropsWithChildren } from \"react\";\n\ninterface containerProps {\n  className: string;\n}\n\nexport const Container = (props: PropsWithChildren<containerProps>) => {\n  const { className, children } = props;\n\n  return <div className={className}>{children}</div>;\n};\n","import React, { PropsWithChildren, useState } from \"react\";\nimport { CoalitionId, GameCoalitionsValues, Player } from \"../types/game\";\n\ninterface ParachuteProps {\n  coalitionsValues: GameCoalitionsValues;\n  players: Player[];\n  editable?: boolean;\n  onUpdateCoalition?: (c: GameCoalitionsValues) => void;\n}\n\nexport const Parachute = (props: ParachuteProps) => {\n  const { coalitionsValues, players, editable } = props;\n\n  const [input, setInput] = useState<GameCoalitionsValues>({\n    ...coalitionsValues,\n  });\n\n  const handleUpdateVal = (c: CoalitionId) => {\n    return (value: number) => {\n      const newInput = { ...input, [c]: value };\n      setInput(newInput);\n      props.onUpdateCoalition && props.onUpdateCoalition(newInput);\n    };\n  };\n\n  return (\n    <div className={\"par_root\"}>\n      <div className={\"par_top\"}>\n        <ValueButton\n          disabled={!editable}\n          value={coalitionsValues[\"13\"]}\n          onUpdate={handleUpdateVal(\"13\")}\n        />\n      </div>\n      <div className={\"par_second\"}>\n        <ValueButton\n          disabled={!editable}\n          value={coalitionsValues[\"12\"]}\n          onUpdate={handleUpdateVal(\"12\")}\n        />\n        <ValueButton\n          disabled={!editable}\n          value={coalitionsValues[\"23\"]}\n          onUpdate={handleUpdateVal(\"23\")}\n        />\n      </div>\n      <div className={\"par_row_of_players\"}>\n        <PlayerButton>{players[0]}</PlayerButton>\n        <PlayerButton>{players[1]}</PlayerButton>\n        <PlayerButton>{players[2]}</PlayerButton>\n      </div>\n      <div className={\"par_bottom\"}>\n        <ValueButton\n          disabled={!editable}\n          value={coalitionsValues[\"123\"]}\n          onUpdate={handleUpdateVal(\"123\")}\n        />\n      </div>\n    </div>\n  );\n};\n\ninterface valueButtonProps {\n  disabled?: boolean;\n  value: number;\n  onUpdate: (n: number) => void;\n}\n\nconst ValueButton = (props: valueButtonProps) => {\n  return (\n    <input\n      type=\"number\"\n      disabled={!!props.disabled}\n      className={\"value_button\"}\n      defaultValue={props.value}\n      onChange={(e) => {\n        return props.onUpdate(parseInt(e.target.value));\n      }}\n    />\n  );\n};\n\nconst PlayerButton = (props: PropsWithChildren<{}>) => {\n  return <button className={\"player_button\"}>{props.children}</button>;\n};\n","import React from \"react\";\nimport { Parachute } from \"./Parachute\";\nimport {\n  CoalitionId,\n  GameCoalitionsValues,\n  Offer,\n  Player,\n} from \"../types/game\";\nimport {\n  coalitionsForPlayer,\n  getCoalitionString,\n  getPlayerName,\n  latestAcceptedOffer,\n} from \"../types/helpers\";\n\ninterface selectCoalitionProps {\n  coalitionsValues: GameCoalitionsValues;\n  players: Player[];\n  currentTurn: Player;\n  onCoalitionSelect: (c: CoalitionId) => void;\n  offers: Array<Offer>;\n  onGiveUp: () => void;\n}\n\nexport const SelectCoalition = (props: selectCoalitionProps) => {\n  return (\n    <div className={\"coal_select_root\"}>\n      <Parachute {...props} />\n      <div>{`Its ${getPlayerName(\n        props.currentTurn\n      )}'s Turn to make an offer:`}</div>\n      <CurrentAgreement\n        latestAcceptedOffer={latestAcceptedOffer(props.offers)!}\n      />\n      <ActualSelection {...props} />\n    </div>\n  );\n};\n\nconst ActualSelection = (props: selectCoalitionProps) => {\n  const { coalitionsValues, currentTurn, onGiveUp } = props;\n  const coalitions = coalitionsForPlayer(currentTurn);\n\n  return (\n    <div className={\"coal_selections\"}>\n      {coalitions.map((c: CoalitionId, idx: number) => (\n        <SingleCoal\n          key={idx}\n          coalitionsValues={coalitionsValues}\n          coalitionId={c}\n          onCoalitionSelect={props.onCoalitionSelect}\n        />\n      ))}\n      <div className={\"give_up_root\"}>\n        <p>{\"Can't offer anything better.\"}</p>\n        <button onClick={onGiveUp} className={\"give_up_btn\"}>\n          Give up\n        </button>\n      </div>\n    </div>\n  );\n};\n\ninterface singleCoalProps {\n  coalitionId: CoalitionId;\n  coalitionsValues: GameCoalitionsValues;\n  onCoalitionSelect: (c: CoalitionId) => void;\n}\n\nconst SingleCoal = (props: singleCoalProps) => {\n  const { coalitionId, coalitionsValues, onCoalitionSelect } = props;\n  const txt = getCoalitionString(props.coalitionId);\n\n  const onClickHandler = () => {\n    return onCoalitionSelect(coalitionId);\n  };\n\n  return (\n    <div className={\"single_coal_selection\"}>\n      <p>{`${txt}`}</p>\n      <p>{`value: ${coalitionsValues[coalitionId]}`}</p>\n      <button onClick={onClickHandler}>Select</button>\n    </div>\n  );\n};\n\ninterface agreementProps {\n  latestAcceptedOffer: Offer;\n}\n\nconst CurrentAgreement = (props: agreementProps) => {\n  const { latestAcceptedOffer: o } = props;\n\n  return (\n    <div className={\"aggr\"}>\n      <p>\n        If nobody will accept any offers, The split will be As follows:\n        <br />\n        {[Player.P1, Player.P2, Player.P3].map((p, idx) => {\n          return (\n            <span key={idx} className={\"aggr_split\"}>\n              {`${p} will get:`}\n              <span className={\"value\"}>{`${o.split[p]}`}</span>\n            </span>\n          );\n        })}\n      </p>\n    </div>\n  );\n};\n","import {\n  CoalitionId,\n  GameCoalitionsValues,\n  Offer,\n  Player,\n  Split,\n} from \"../types/game\";\nimport React, { ChangeEvent, FormEventHandler, useState } from \"react\";\nimport { getParticipants } from \"../types/helpers\";\nimport { Parachute } from \"./Parachute\";\n\ninterface props {\n  coalitionForOffer: CoalitionId;\n  coalitionsValues: GameCoalitionsValues;\n  players: Player[];\n  currentTurn: Player;\n  onOfferSubmit: (\n    split: Split,\n    coalitionId: CoalitionId,\n    offerFrom: Player\n  ) => void;\n  offers: Array<Offer>;\n}\n\nexport const OfferForm = (props: props) => {\n  const {\n    coalitionForOffer,\n    coalitionsValues,\n    onOfferSubmit,\n    currentTurn,\n  } = props;\n  const [input, setInput] = useState<Split>({\n    P1: 0,\n    P2: 0,\n    P3: 0,\n  });\n\n  const players = getParticipants(coalitionForOffer);\n\n  const handleSubmit: FormEventHandler = (\n    event: ChangeEvent<HTMLInputElement>\n  ) => {\n    event.preventDefault();\n    onOfferSubmit(input, coalitionForOffer, currentTurn);\n  };\n\n  const onChangeHandler = (p: Player) => (value: number) => {\n    const res = { ...input };\n    res[p] =\n      value >= 0\n        ? value > coalitionsValues[coalitionForOffer]\n          ? coalitionsValues[coalitionForOffer]\n          : value\n        : 0;\n\n    setInput(res);\n  };\n\n  return (\n    <div className={\"offer_form_root\"}>\n      <Parachute {...props} />\n      <form className={\"offer_form\"} onSubmit={handleSubmit}>\n        {players.map((p) => {\n          return (\n            <PlayerInput\n              maxForCoalition={coalitionsValues[coalitionForOffer]}\n              value={input[p]}\n              player={p}\n              onChange={onChangeHandler(p)}\n            />\n          );\n        })}\n        <p>{`Total input: ${input.P1 + input.P2 + input.P3}, Expected input: ${\n          coalitionsValues[coalitionForOffer]\n        }`}</p>\n        <input\n          type=\"submit\"\n          value=\"Submit\"\n          disabled={\n            input.P1 + input.P2 + input.P3 !==\n            coalitionsValues[coalitionForOffer]\n          }\n        />\n      </form>\n    </div>\n  );\n};\n\ninterface inputPros {\n  player: Player;\n  value: number;\n  maxForCoalition: number;\n  onChange: (value: number) => void;\n}\n\nconst PlayerInput = (props: inputPros) => {\n  const { player, value, onChange, maxForCoalition } = props;\n\n  return (\n    <div className={\"offer_input\"}>\n      <label>{player} will get:</label>\n\n      <input\n        value={value ? value : \"\"}\n        min={0}\n        max={maxForCoalition}\n        type=\"number\"\n        onChange={(e) => {\n          onChange(parseInt(e.target.value || \"0\"));\n        }}\n      />\n    </div>\n  );\n};\n","import {\n  AckStatus,\n  CoalitionId,\n  GameCoalitionsValues,\n  Offer,\n  Player,\n  respStatus,\n} from \"../types/game\";\nimport React from \"react\";\nimport { Parachute } from \"./Parachute\";\n\ninterface props {\n  coalitionForOffer: CoalitionId;\n  coalitionsValues: GameCoalitionsValues;\n  players: Player[];\n  currentTurn: Player;\n  offers: Array<Offer>;\n  onOfferRespond: (p: Player, response: respStatus) => void;\n}\n\nexport const AckForm = (props: props) => {\n  const { onOfferRespond } = props;\n  const latestOffer = props.offers[props.offers.length - 1];\n\n  const relevantAckStatus = (status: AckStatus) => {\n    return status !== \"NON_RELEVANT\" && status !== \"PROPOSED\";\n  };\n\n  const handleOnClick = (p: Player) => {\n    return (status: respStatus) => {\n      onOfferRespond(p, status);\n\n      console.log(`Clicked ${p},${status} `);\n    };\n  };\n\n  return (\n    <div className={\"ack_form_root\"}>\n      <Parachute {...props} />\n      <div className={\"ack_form\"}>\n        {[Player.P1, Player.P2, Player.P3].map((p: Player, idx: number) => {\n          return (\n            relevantAckStatus(latestOffer[p]) && (\n              <SingleSelect\n                key={idx}\n                onClick={handleOnClick(p)}\n                player={p}\n                disabled={latestOffer[p] !== \"TBD\"}\n              />\n            )\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\ninterface toggleProps {\n  player: Player;\n  onClick: (status: respStatus) => void;\n  disabled?: boolean;\n}\n\nconst SingleSelect = (props: toggleProps) => {\n  const { player, onClick, disabled } = props;\n  return (\n    <div className=\"single_ack\">\n      <p\n        className={\"question\"}\n      >{`${player}, What do you think about the offer?`}</p>\n      <div className={\"answer\"}>\n        <span>Looks good!</span>\n        <button\n          className={\"accept\"}\n          onClick={() => onClick(\"ACCEPT\")}\n          disabled={disabled}\n        >\n          Accept\n        </button>\n      </div>\n      <div className={\"answer\"}>\n        <span>No way!</span>\n        <button\n          className={\"reject\"}\n          onClick={() => onClick(\"REJECT\")}\n          disabled={disabled}\n        >\n          Reject\n        </button>\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { allPlayers, Offer, Player } from \"../types/game\";\nimport { latestAcceptedOffer } from \"../types/helpers\";\n\ninterface singleOfferProps {\n  offer: Offer;\n}\n\nexport const SingleOffer = (props: singleOfferProps) => {\n  const { offer: o } = props;\n  return (\n    <li>\n      <span>{`Values: P1: ${o.split.P1}, P2: ${o.split.P2}, P3: ${o.split.P3}`}</span>\n      <span>{`P1: ${o[Player.P1]}`}</span>\n      <span>{`P2: ${o[Player.P2]}`}</span>\n      <span>{`P3: ${o[Player.P3]}`}</span>\n    </li>\n  );\n};\n\ninterface listOfOffersProps {\n  offers: Array<Offer>;\n}\n\nexport const ListOfOffers = (props: listOfOffersProps) => {\n  const { offers } = props;\n  return (\n    <ul className={\"list_offers\"}>\n      {offers.map((offer) => (\n        <SingleOffer offer={offer} />\n      ))}\n    </ul>\n  );\n};\n\ninterface props {\n  offers: Array<Offer>;\n}\n\nexport const FinishScreen = (props: props) => {\n  const lao = latestAcceptedOffer(props.offers);\n  return (\n    <div>\n      The game was finished and we have a coalition !!\n      {allPlayers.map((p) => {\n        return (\n          <p>\n            {`${p} gets `}\n            <span className={\"finish_value\"}>{`${lao.split[p]}`}</span>\n          </p>\n        );\n      })}\n      <ListOfOffers {...props} />\n    </div>\n  );\n};\n","import React from \"react\";\nimport { Parachute } from \"./Parachute\";\nimport { GameCoalitionsValues, Player } from \"../types/game\";\n\ninterface setupScreenProps {\n  coalitionsValues: GameCoalitionsValues;\n  players: Player[];\n  onUpdateCoalition: (c: GameCoalitionsValues) => void;\n  onGameStart: () => void;\n}\n\nconst presetGames: Array<GameCoalitionsValues> = [\n  {\n    \"12\": 50,\n    \"13\": 70,\n    \"23\": 90,\n    \"123\": 110,\n  },\n  {\n    \"12\": 40,\n    \"13\": 70,\n    \"23\": 80,\n    \"123\": 90,\n  },\n  {\n    \"12\": 50,\n    \"13\": 70,\n    \"23\": 20,\n    \"123\": 80,\n  },\n  {\n    \"12\": 15,\n    \"13\": 25,\n    \"23\": 30,\n    \"123\": 100,\n  },\n  {\n    \"12\": 10,\n    \"13\": 70,\n    \"23\": 90,\n    \"123\": 92,\n  },\n  {\n    \"12\": 56,\n    \"13\": 70,\n    \"23\": 88,\n    \"123\": 100,\n  },\n  {\n    \"12\": 25,\n    \"13\": 30,\n    \"23\": 40,\n    \"123\": 70,\n  },\n];\n\nexport const SetupScreen = (props: setupScreenProps) => {\n  const handlePresetGame = (v: GameCoalitionsValues) => {\n    props.onUpdateCoalition && props.onUpdateCoalition(v);\n    props.onGameStart();\n  };\n\n  return (\n    <div className={\"setup_root\"}>\n      <h2>You can edit the values of the coalitions:</h2>\n      <Parachute {...props} editable={true} />\n      <h2>Or you can select one of the preset games:</h2>\n      <div className={\"preset_btns\"}>\n        {presetGames.map((value, idx) => {\n          return (\n            <button\n              onClick={() => handlePresetGame(value)}\n              className={\"game_btn\"}\n              title={JSON.stringify(value)}\n              key={idx}\n            >{`Game ${idx + 1}`}</button>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n","import { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { GameScreen, StateShape } from \"../store/state\";\nimport {\n  GameAction,\n  giveUp,\n  respondOffer,\n  restartGame,\n  selectCoalition,\n  setup,\n  startGame,\n  submitOffer,\n  undo,\n  updateCoalitions,\n} from \"../store/actions\";\nimport { App } from \"../ui/App\";\nimport {\n  CoalitionId,\n  GameCoalitionsValues,\n  Offer,\n  Player,\n  respStatus,\n  Split,\n} from \"../types/game\";\n\nconst defaultOffer: Offer = {\n  P1: \"NON_RELEVANT\",\n  P2: \"ACCEPTED\",\n  P3: \"ACCEPTED\",\n  actor: Player.P2,\n  selectedCoalition: \"23\",\n  split: {\n    P1: 0,\n    P2: 25,\n    P3: 25,\n  },\n};\n\ninterface DispatchProps {\n  onGameStart: () => void;\n  onGameRestart: () => void;\n  onCoalitionSelect: (c: CoalitionId) => void;\n  onOfferSubmit: (\n    split: Split,\n    coalitionId: CoalitionId,\n    offerFrom: Player\n  ) => void;\n  onOfferRespond: (p: Player, response: respStatus) => void;\n  onUndo: () => void;\n  onGiveUp: () => void;\n  onSetupClick: () => void;\n  onUpdateCoalition: (c: GameCoalitionsValues) => void;\n}\n\ninterface StateProps {\n  coalitionsValues: GameCoalitionsValues;\n  screen: GameScreen;\n  players: Array<Player>;\n  currentTurn: Player;\n  coalitionForOffer: CoalitionId;\n  offers: Array<Offer>;\n}\n\ninterface OwnProps {}\n\nexport type AppContainerProps = DispatchProps & StateProps;\n\nconst mapStateToProps = (state: StateShape): StateProps => {\n  return {\n    screen: state.screen,\n    coalitionsValues: state.coalitionsValues,\n    players: state.players,\n    currentTurn: state.currentTurn,\n    coalitionForOffer: state.coalitionForOffer,\n    offers: state.offers,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch<GameAction>): DispatchProps => {\n  return {\n    onUndo: () => dispatch(undo()),\n    onCoalitionSelect: (c: CoalitionId) => dispatch(selectCoalition(c)),\n    onGameRestart: () => dispatch(restartGame()),\n    onGameStart: () => dispatch(startGame(defaultOffer)),\n    onOfferSubmit: (\n      split: Split,\n      coalitionId: CoalitionId,\n      offerFrom: Player\n    ) => dispatch(submitOffer(split, coalitionId, offerFrom)),\n    onOfferRespond: (p: Player, response: respStatus) =>\n      dispatch(respondOffer(p, response)),\n    onGiveUp: () => dispatch(giveUp()),\n    onSetupClick: () => dispatch(setup()),\n    onUpdateCoalition: (c) => dispatch(updateCoalitions(c)),\n  };\n};\n\nconst AppContainer = connect<StateProps, DispatchProps, OwnProps, StateShape>(\n  mapStateToProps,\n  mapDispatchToProps\n)(App);\n\nexport { AppContainer as App };\n","import React from \"react\";\nimport \"../stylesheets/App.css\";\nimport \"../stylesheets/sliders.css\";\nimport { TopBar } from \"./TopBar\";\nimport { AppContainerProps } from \"../containers/AppContainer\";\nimport { Intro } from \"./Intro\";\nimport { Container } from \"./Container\";\nimport { SelectCoalition } from \"./SelectCoalition\";\nimport { OfferForm } from \"./OfferForm\";\nimport { AckForm } from \"./AckForm\";\nimport { FinishScreen } from \"./Finished\";\nimport { SetupScreen } from \"./SetupScreen\";\n\nexport const App = (props: AppContainerProps) => {\n  const {\n    onGameStart,\n    screen,\n    onCoalitionSelect,\n    coalitionForOffer,\n    onUndo,\n    onSetupClick,\n  } = props;\n  return (\n    <React.Fragment>\n      <TopBar\n        onStartGame={onGameStart}\n        onIntroClick={props.onGameRestart}\n        screen={screen}\n        onUndo={onUndo}\n        onSetupClick={onSetupClick}\n      />\n      <Container className={\"app\"}>\n        {screen === \"SETUP\" && <SetupScreen {...props} />}\n        {screen === \"INTRO\" && <Intro />}\n        {screen === \"SELECT_COAL\" && (\n          <SelectCoalition {...props} onCoalitionSelect={onCoalitionSelect} />\n        )}\n        {screen === \"OFFER\" && <OfferForm {...props} />}\n        {screen === \"ACK\" && <AckForm {...props} />}\n        {screen === \"FINISHED\" && <FinishScreen {...props} />}\n      </Container>\n    </React.Fragment>\n  );\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { storeFactory } from \"./store\";\nimport { Provider } from \"react-redux\";\nimport { defaultState } from \"./store/state\";\nimport { App } from \"./containers/AppContainer\";\n\nconst appInitialState = localStorage[\"redux-store\"]\n  ? JSON.parse(localStorage[\"redux-store\"])\n  : defaultState;\n\nconst saveState = () =>\n  (localStorage[\"redux-store\"] = JSON.stringify(store.getState()));\n\nconst store = storeFactory(appInitialState);\nstore.subscribe(saveState);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}