{"version":3,"sources":["serviceWorker.ts","store/actions.ts","components/containers/SetupScreen.tsx","types/game.ts","components/ui/SetupScreen.tsx","components/ui/GameScreen.tsx","components/ui/App.tsx","components/containers/AppContainer.tsx","store/reducers.ts","store/index.ts","store/state.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","Actions","Players","defaultGame","value12","value13","value23","value123","SetupScreenContainer","connect","state","dispatch","onStartGameClick","gameCoalitions","type","START_GAME","payload","props","Container","maxWidth","Button","variant","color","onClick","GameScreen","GameCoalitionsZeroValue","App","screenType","className","AppContainer","screen","appReducer","combineReducers","action","logger","getState","next","console","groupCollapsed","log","returnValue","groupEnd","initialState","store","applyMiddleware","thunk","createStore","storeFactory","localStorage","JSON","parse","subscribe","stringify","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"sPAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,IChBMC,E,0CAAAA,K,yBAAAA,M,KCcZ,IChBYC,EDgBNC,EAA8B,CAClCC,QAAS,GACTC,QAAS,GACTC,QAAS,GACTC,SAAU,KAaNC,EAAuBC,aAVL,SAACC,GACvB,MAAO,MAGkB,SAACC,GAC1B,MAAO,CACLC,iBAAkB,kBAAMD,GDdFE,ECcqBV,EDbtC,CACLW,KAAMb,EAAQc,WACdC,QAAS,CACPH,eAAgBA,MAJf,IAAmBA,MCkBGJ,EE1ByC,SACpEQ,GACI,IACIL,EAAqBK,EAArBL,iBACR,OACE,kBAACM,EAAA,EAAD,CAAWC,SAAU,MACnB,kBAACC,EAAA,EAAD,CAAQC,QAAQ,YAAYC,MAAM,UAAUC,QAASX,GAArD,kBCXOY,EAAa,WACxB,OAAO,gC,SFHGtB,O,WAAAA,I,WAAAA,I,YAAAA,M,KAML,IAYMuB,EAA0C,CACrDrB,QAAS,EACTC,QAAS,EACTC,QAAS,EACTC,SAAU,GGFGmB,EAVH,SAACT,GAAqB,IACxBU,EAAeV,EAAfU,WACR,OACE,yBAAKC,UAAU,OHPS,iBGQrBD,GAA+B,kBAAC,EAAD,MHPX,gBGQpBA,GAA8B,kBAAC,EAAD,QCU/BE,EAAepB,aAVG,SAACC,GACvB,MAAO,CACLiB,WAAYjB,EAAMoB,WAIK,SAACnB,GAC1B,MAAO,KAGYF,CAQnBiB,G,gBCHaK,EALWC,YAAgB,CACxCnB,eAtBqB,WAGjB,IAFJH,EAEG,uDAFqBe,EACxBQ,EACG,uCACH,OAAQA,EAAOnB,MACb,KAAKb,EAAQc,WACX,OAAOkB,EAAOjB,QAAQH,eACxB,QACE,OAAOH,IAeXoB,OAXa,WAA4D,IAA3DA,EAA0D,uDLV9C,eKUuBG,EAAuB,uCACxE,OAAQA,EAAOnB,MACb,KAAKb,EAAQc,WACX,MLZqB,cKavB,QACE,OAAOe,MCXPI,EAAS,WAiBb,OAhBqC,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OAAiC,SACpEC,GADoE,OAEjE,SAACH,GACJI,QAAQC,eAAR,gCAAgDL,EAAOnB,OACvDuB,QAAQE,IAAI,gBAAiBN,GAG7B,IAAMO,EAAcJ,EAAKH,GAMzB,OAJAI,QAAQE,IAAI,uBAAwBJ,KACpCE,QAAQI,WAGDD,MCjBEE,EAA0C,CACrDZ,OPF0B,gBQUtBa,EFcsB,WAAwB,IAAvBD,EAAsB,uDAAP,GAC1C,OAAOE,YAAgBC,IAAOX,IAAvBU,CAAiCE,IAAjCF,CACLb,EACAW,GEjBUK,CAPUC,aAAa,eACjCC,KAAKC,MAAMF,aAAa,gBACxBN,GAMJC,EAAMQ,WAJY,kBACfH,aAAa,eAAiBC,KAAKG,UAAUT,EAAMR,eAKtDkB,IAASC,OACP,kBAAC,IAAD,CAAUX,MAAOA,GACf,kBAAC,IAAMY,WAAP,KACE,kBAAC,EAAD,QAGJC,SAASC,eAAe,SX+GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACN5B,QAAQ4B,MAAMA,EAAMC,c","file":"static/js/main.88a5dfb3.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { GameCoalitions } from \"../types/game\";\n\nexport enum Actions {\n  START_GAME = \"START_GAME\",\n}\n\ninterface startGameAction {\n  type: Actions.START_GAME;\n  payload: {\n    gameCoalitions: GameCoalitions;\n  };\n}\n\nexport type gameAction = startGameAction;\n\nexport function startGame(gameCoalitions: GameCoalitions): startGameAction {\n  return {\n    type: Actions.START_GAME,\n    payload: {\n      gameCoalitions: gameCoalitions,\n    },\n  };\n}\n","import { connect } from \"react-redux\";\nimport { SetupScreen } from \"../ui/SetupScreen\";\nimport { CoalitionsGameGlobalState } from \"../../store/state\";\nimport { Dispatch } from \"redux\";\nimport { gameAction, startGame } from \"../../store/actions\";\nimport { GameCoalitions } from \"../../types/game\";\n\ninterface DispatchProps {\n  onStartGameClick: () => void;\n}\n\ninterface StateProps {}\n\ninterface OwnProps {}\n\n// TODO: remove this\nconst defaultGame: GameCoalitions = {\n  value12: 70,\n  value13: 60,\n  value23: 50,\n  value123: 100,\n};\n\nconst mapStateToProps = (state: CoalitionsGameGlobalState): StateProps => {\n  return {};\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch<gameAction>): DispatchProps => {\n  return {\n    onStartGameClick: () => dispatch(startGame(defaultGame)),\n  };\n};\n\nconst SetupScreenContainer = connect<\n  StateProps,\n  DispatchProps,\n  OwnProps,\n  CoalitionsGameGlobalState\n>(\n  mapStateToProps,\n  mapDispatchToProps\n)(SetupScreen);\n\nexport { SetupScreenContainer as SetupScreen };\n","export enum Players {\n  P1,\n  P2,\n  P3,\n}\n\nexport const SETUP_SCREEN = \"SETUP_SCREEN\";\nexport const GAME_SCREEN = \"GAME_SCREEN\";\n\nexport type ScreenType = typeof SETUP_SCREEN | typeof GAME_SCREEN;\n\nexport interface GameCoalitions {\n  value12: number;\n  value23: number;\n  value13: number;\n  value123: number;\n}\n\nexport const GameCoalitionsZeroValue: GameCoalitions = {\n  value12: 0,\n  value13: 0,\n  value23: 0,\n  value123: 0,\n};\n\nexport interface split {\n  coalition: keyof GameCoalitions;\n  P1: number;\n  P2: number;\n  P3: number;\n}\n","import React from \"react\";\nimport { Button, Container } from \"@material-ui/core\";\n\ninterface SetupScreenProps {\n  onStartGameClick: () => void;\n}\n\nexport const SetupScreen: React.FunctionComponent<SetupScreenProps> = (\n  props: SetupScreenProps\n) => {\n  const { onStartGameClick } = props;\n  return (\n    <Container maxWidth={\"sm\"}>\n      <Button variant=\"contained\" color=\"primary\" onClick={onStartGameClick}>\n        Start Game\n      </Button>\n    </Container>\n  );\n};\n","import React from \"react\";\n\nexport const GameScreen = () => {\n  return <div />;\n};\n","import React from \"react\";\nimport \"../../stylesheets/App.css\";\nimport { SetupScreen } from \"../containers/SetupScreen\";\nimport { GameScreen } from \"./GameScreen\";\nimport { GAME_SCREEN, ScreenType, SETUP_SCREEN } from \"../../types/game\";\n\ninterface AppProps {\n  screenType: ScreenType;\n}\n\nconst App = (props: AppProps) => {\n  const { screenType } = props;\n  return (\n    <div className=\"app\">\n      {screenType === SETUP_SCREEN && <SetupScreen />}\n      {screenType === GAME_SCREEN && <GameScreen />}\n    </div>\n  );\n};\n\nexport default App;\n","import { connect } from \"react-redux\";\nimport { CoalitionsGameGlobalState } from \"../../store/state\";\nimport { Dispatch } from \"redux\";\nimport { gameAction } from \"../../store/actions\";\nimport App from \"../ui/App\";\nimport { ScreenType } from \"../../types/game\";\n\ninterface DispatchProps {}\n\ninterface StateProps {\n  screenType: ScreenType;\n}\n\ninterface OwnProps {}\n\nconst mapStateToProps = (state: CoalitionsGameGlobalState): StateProps => {\n  return {\n    screenType: state.screen,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch<gameAction>): DispatchProps => {\n  return {};\n};\n\nconst AppContainer = connect<\n  StateProps,\n  DispatchProps,\n  OwnProps,\n  CoalitionsGameGlobalState\n>(\n  mapStateToProps,\n  mapDispatchToProps\n)(App);\n\nexport { AppContainer as App };\n","import { combineReducers } from \"redux\";\nimport { Actions, gameAction } from \"./actions\";\nimport { GAME_SCREEN, GameCoalitions, GameCoalitionsZeroValue, ScreenType, SETUP_SCREEN, } from \"../types/game\";\n\nconst gameCoalitions = (\n  state: GameCoalitions = GameCoalitionsZeroValue,\n  action: gameAction\n) => {\n  switch (action.type) {\n    case Actions.START_GAME:\n      return action.payload.gameCoalitions;\n    default:\n      return state;\n  }\n};\n\nconst screen = (screen: ScreenType = SETUP_SCREEN, action: gameAction) => {\n  switch (action.type) {\n    case Actions.START_GAME:\n      return GAME_SCREEN;\n    default:\n      return screen;\n  }\n};\n\nexport const appReducer = combineReducers({\n  gameCoalitions: gameCoalitions,\n  screen: screen,\n});\n\nexport default appReducer;\n","import {\n  applyMiddleware,\n  createStore,\n  Dispatch,\n  Middleware,\n  MiddlewareAPI,\n} from \"redux\";\nimport thunk from \"redux-thunk\";\nimport appReducer from \"./reducers\";\n\nconst logger = () => {\n  const loggerMiddleware: Middleware = ({ getState }: MiddlewareAPI) => (\n    next: Dispatch\n  ) => (action) => {\n    console.groupCollapsed(`dispatching action => ${action.type}`);\n    console.log(\"will dispatch\", action);\n\n    // Call the next dispatch method in the middleware chain.\n    const returnValue = next(action);\n\n    console.log(\"state after dispatch\", getState());\n    console.groupEnd();\n    // This will likely be the action itself, unless\n    // a middleware further in chain changed it.\n    return returnValue;\n  };\n\n  return loggerMiddleware;\n};\n\nexport const storeFactory = (initialState = {}) => {\n  return applyMiddleware(thunk, logger())(createStore)(\n    appReducer,\n    initialState\n  );\n};\n","import { GameCoalitions, ScreenType, SETUP_SCREEN } from \"../types/game\";\n\nexport interface CoalitionsGameGlobalState {\n  gameCoalitions?: GameCoalitions;\n  screen: ScreenType;\n}\n\nexport const initialState: CoalitionsGameGlobalState = {\n  screen: SETUP_SCREEN,\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { App } from \"./components/containers/AppContainer\";\nimport { storeFactory } from \"./store\";\nimport { Provider } from \"react-redux\";\nimport { initialState } from \"./store/state\";\n\nconst appInitialState = localStorage[\"redux-store\"]\n  ? JSON.parse(localStorage[\"redux-store\"])\n  : initialState;\n\nconst saveState = () =>\n  (localStorage[\"redux-store\"] = JSON.stringify(store.getState()));\n\nconst store = storeFactory(appInitialState);\nstore.subscribe(saveState);\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}